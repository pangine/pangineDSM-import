// Code generated by capnpc-go. DO NOT EDIT.

package pangine

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

// record all necessary fields for analysis
type AnalysisRst struct{ capnp.Struct }

// AnalysisRst_TypeID is the unique identifier for the type AnalysisRst.
const AnalysisRst_TypeID = 0x9f23763eb109ffdc

func NewAnalysisRst(s *capnp.Segment) (AnalysisRst, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return AnalysisRst{st}, err
}

func NewRootAnalysisRst(s *capnp.Segment) (AnalysisRst, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return AnalysisRst{st}, err
}

func ReadRootAnalysisRst(msg *capnp.Message) (AnalysisRst, error) {
	root, err := msg.RootPtr()
	return AnalysisRst{root.Struct()}, err
}

func (s AnalysisRst) String() string {
	str, _ := text.Marshal(0x9f23763eb109ffdc, s.Struct)
	return str
}

func (s AnalysisRst) InstOffsets() (InstOffset, error) {
	p, err := s.Struct.Ptr(0)
	return InstOffset{Struct: p.Struct()}, err
}

func (s AnalysisRst) HasInstOffsets() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s AnalysisRst) SetInstOffsets(v InstOffset) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewInstOffsets sets the instOffsets field to a newly
// allocated InstOffset struct, preferring placement in s's segment.
func (s AnalysisRst) NewInstOffsets() (InstOffset, error) {
	ss, err := NewInstOffset(s.Struct.Segment())
	if err != nil {
		return InstOffset{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s AnalysisRst) FuncStarts() (FuncStart, error) {
	p, err := s.Struct.Ptr(1)
	return FuncStart{Struct: p.Struct()}, err
}

func (s AnalysisRst) HasFuncStarts() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s AnalysisRst) SetFuncStarts(v FuncStart) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewFuncStarts sets the funcStarts field to a newly
// allocated FuncStart struct, preferring placement in s's segment.
func (s AnalysisRst) NewFuncStarts() (FuncStart, error) {
	ss, err := NewFuncStart(s.Struct.Segment())
	if err != nil {
		return FuncStart{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// AnalysisRst_List is a list of AnalysisRst.
type AnalysisRst_List struct{ capnp.List }

// NewAnalysisRst creates a new list of AnalysisRst.
func NewAnalysisRst_List(s *capnp.Segment, sz int32) (AnalysisRst_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return AnalysisRst_List{l}, err
}

func (s AnalysisRst_List) At(i int) AnalysisRst { return AnalysisRst{s.List.Struct(i)} }

func (s AnalysisRst_List) Set(i int, v AnalysisRst) error { return s.List.SetStruct(i, v.Struct) }

func (s AnalysisRst_List) String() string {
	str, _ := text.MarshalList(0x9f23763eb109ffdc, s.List)
	return str
}

// AnalysisRst_Promise is a wrapper for a AnalysisRst promised by a client call.
type AnalysisRst_Promise struct{ *capnp.Pipeline }

func (p AnalysisRst_Promise) Struct() (AnalysisRst, error) {
	s, err := p.Pipeline.Struct()
	return AnalysisRst{s}, err
}

func (p AnalysisRst_Promise) InstOffsets() InstOffset_Promise {
	return InstOffset_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p AnalysisRst_Promise) FuncStarts() FuncStart_Promise {
	return FuncStart_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

// offsets that can be considered as an instruction
type InstOffset struct{ capnp.Struct }

// InstOffset_TypeID is the unique identifier for the type InstOffset.
const InstOffset_TypeID = 0xc72aca35097eecb1

func NewInstOffset(s *capnp.Segment) (InstOffset, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return InstOffset{st}, err
}

func NewRootInstOffset(s *capnp.Segment) (InstOffset, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return InstOffset{st}, err
}

func ReadRootInstOffset(msg *capnp.Message) (InstOffset, error) {
	root, err := msg.RootPtr()
	return InstOffset{root.Struct()}, err
}

func (s InstOffset) String() string {
	str, _ := text.Marshal(0xc72aca35097eecb1, s.Struct)
	return str
}

func (s InstOffset) Offset() (capnp.Int64List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.Int64List{List: p.List()}, err
}

func (s InstOffset) HasOffset() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s InstOffset) SetOffset(v capnp.Int64List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewOffset sets the offset field to a newly
// allocated capnp.Int64List, preferring placement in s's segment.
func (s InstOffset) NewOffset(n int32) (capnp.Int64List, error) {
	l, err := capnp.NewInt64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Int64List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// InstOffset_List is a list of InstOffset.
type InstOffset_List struct{ capnp.List }

// NewInstOffset creates a new list of InstOffset.
func NewInstOffset_List(s *capnp.Segment, sz int32) (InstOffset_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return InstOffset_List{l}, err
}

func (s InstOffset_List) At(i int) InstOffset { return InstOffset{s.List.Struct(i)} }

func (s InstOffset_List) Set(i int, v InstOffset) error { return s.List.SetStruct(i, v.Struct) }

func (s InstOffset_List) String() string {
	str, _ := text.MarshalList(0xc72aca35097eecb1, s.List)
	return str
}

// InstOffset_Promise is a wrapper for a InstOffset promised by a client call.
type InstOffset_Promise struct{ *capnp.Pipeline }

func (p InstOffset_Promise) Struct() (InstOffset, error) {
	s, err := p.Pipeline.Struct()
	return InstOffset{s}, err
}

// offsets that represent the start of a function
type FuncStart struct{ capnp.Struct }

// FuncStart_TypeID is the unique identifier for the type FuncStart.
const FuncStart_TypeID = 0xbba3380e8da6875b

func NewFuncStart(s *capnp.Segment) (FuncStart, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FuncStart{st}, err
}

func NewRootFuncStart(s *capnp.Segment) (FuncStart, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FuncStart{st}, err
}

func ReadRootFuncStart(msg *capnp.Message) (FuncStart, error) {
	root, err := msg.RootPtr()
	return FuncStart{root.Struct()}, err
}

func (s FuncStart) String() string {
	str, _ := text.Marshal(0xbba3380e8da6875b, s.Struct)
	return str
}

func (s FuncStart) Func() (capnp.Int64List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.Int64List{List: p.List()}, err
}

func (s FuncStart) HasFunc() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FuncStart) SetFunc(v capnp.Int64List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewFunc sets the func field to a newly
// allocated capnp.Int64List, preferring placement in s's segment.
func (s FuncStart) NewFunc(n int32) (capnp.Int64List, error) {
	l, err := capnp.NewInt64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Int64List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// FuncStart_List is a list of FuncStart.
type FuncStart_List struct{ capnp.List }

// NewFuncStart creates a new list of FuncStart.
func NewFuncStart_List(s *capnp.Segment, sz int32) (FuncStart_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FuncStart_List{l}, err
}

func (s FuncStart_List) At(i int) FuncStart { return FuncStart{s.List.Struct(i)} }

func (s FuncStart_List) Set(i int, v FuncStart) error { return s.List.SetStruct(i, v.Struct) }

func (s FuncStart_List) String() string {
	str, _ := text.MarshalList(0xbba3380e8da6875b, s.List)
	return str
}

// FuncStart_Promise is a wrapper for a FuncStart promised by a client call.
type FuncStart_Promise struct{ *capnp.Pipeline }

func (p FuncStart_Promise) Struct() (FuncStart, error) {
	s, err := p.Pipeline.Struct()
	return FuncStart{s}, err
}

const schema_ea5a513cb1666fde = "x\xda\x84\x90?kTM\x14\xc6\xcfs\xff\xbc7\x81" +
	"\xbc\xd9\xbd\\\xdb\xb0\x03\xa6\x88)\xc4\x05\x05\x09\xc15" +
	"\x8d\xa0\x8d\x19\xed\"(\x93\xbb3\xe4\xc2:w\x993" +
	"\xab\xac\x85`%\x04\xb6\xf2\x03\xa4\x10\xc4\xc6bk\xb1" +
	"\x0c\x82\x1f\xc0J\xfc\x00\xc1\xca\xd2f\xe4nbV\xc2" +
	"\x82\xddp\xce3\xe7\xfc~\xa7\xfd\xfev\xd4M[ " +
	"\x92+\xe9\x7f\xe1[X\x9e\xdezv\xf9\x88\xf2\x02\xe1" +
	"{m\xa6\xdbr\xef\x84\xd2(#\xca\x9f\xfe\xca\xc7Y" +
	">\xee\xe4\x1f\x9e\x13\xc2\xa3\xd7\xef&\xab7\xdf~\xbc" +
	"\x90DFT\xe48)\xd6\x90\x15k\xe8\x14\x12=B" +
	"\x98\xfex\xb9|\xe3\xcb\xe6\xe7E\xe9W\xf8YL\x90" +
	"\x15\x13t\x8a\xe3YZY5\x18s\xc5\xd1\x13\xc7\xfe" +
	"j\xa9\x86v\xb8\xb5\xd3\xd4z\\\xf1\x03\xf6\xbb\x80L" +
	"\x10\x85\xc7o\x8e\xe4\xa7\xaf\x87\xc7$\x93\x08;\xeb\xc0" +
	"\x0aQ\x17\xf7\x10\x9c.k\xd7\x17*\x19\x0c\x84\xd5\xa5" +
	"fVn,L\xa5\x07}\x16\xa6v\xe2\xcf\x06\x82\\" +
	"\x8a\x13\xa2\x04D\xf9\x95}\"\xb9\x11C^\x8f\x90\x03" +
	"\x97\xd0\x14\xbb{D\xf2Z\x0c\xb9\x1d!T\x96\xfd}" +
	"c\x982\xed\x19\xed\xb9\x16\x01mB0#[>\xf4" +
	"\xcaQ<k\x9f\xdf\xe8\xac\xbd\xc8\xebN\xf3\xa5\xe5\x95" +
	"\xfb\x87\xd5\x0b\x84\xda\x18\xd6\x9eE\xe2\x0f\x94\x17N\x0f" +
	"\x9dfm\xbd\xf0\x07Zp3A\xd4F(aF=" +
	"[\xfa\xaa\xb6D29\x97\xfb\x7f\x93H.\xc5\x90\xeb" +
	"\x11Z\x0d'V\x09\xbb1\x90R\xd4<\x17\xc2\xddm" +
	"|;\xb3\xb5\x8b\xe96\xce\xe8\x0e\xe7t\xe9\x8c\xaeT" +
	"V\xeckQ\xd6\x96\xab\xbev\xba/\x14\x0beEs" +
	"A7:\xc5\xc3\xdfx[s\xbc\xde\xe9\xa8\x0b\x80\xbf" +
	"\x03\x00\x00\xff\xff\xd7C\xc0\x09"

func init() {
	schemas.Register(schema_ea5a513cb1666fde,
		0x9f23763eb109ffdc,
		0xbba3380e8da6875b,
		0xc72aca35097eecb1)
}
